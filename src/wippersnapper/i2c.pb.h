/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 at Wed Dec 13 12:44:19 2023. */

#ifndef PB_WIPPERSNAPPER_I2C_WIPPERSNAPPER_I2C_PB_H_INCLUDED
#define PB_WIPPERSNAPPER_I2C_WIPPERSNAPPER_I2C_PB_H_INCLUDED
#include <pb.h>
#include "wippersnapper/sensor.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* *
 BusResponse represents the state of the I2C bus, from a device. */
typedef enum _wippersnapper_i2c_BusResponse {
    wippersnapper_i2c_BusResponse_BUS_RESPONSE_UNSPECIFIED = 0, /* * Unspecified error occurred. * */
    wippersnapper_i2c_BusResponse_BUS_RESPONSE_SUCCESS = 1, /* * I2C bus successfully initialized. * */
    wippersnapper_i2c_BusResponse_BUS_RESPONSE_ERROR_HANG = 2, /* * I2C Bus hang, user should reset their board if this persists. * */
    wippersnapper_i2c_BusResponse_BUS_RESPONSE_ERROR_PULLUPS = 3, /* * I2C bus failed to initialize - SDA or SCL needs a pull up. * */
    wippersnapper_i2c_BusResponse_BUS_RESPONSE_ERROR_WIRING = 4, /* * I2C bus failed to communicate - Please check your wiring. * */
    wippersnapper_i2c_BusResponse_BUS_RESPONSE_UNSUPPORTED_SENSOR = 5, /* * WipperSnapper firmware is outdated and does not include
the sensor type - Please update your WipperSnapper firmware. * */
    wippersnapper_i2c_BusResponse_BUS_RESPONSE_DEVICE_INIT_FAIL = 6, /* * I2C device failed to initialize. * */
    wippersnapper_i2c_BusResponse_BUS_RESPONSE_DEVICE_DEINIT_FAIL = 7 /* * I2C device failed to de-initialize. * */
} wippersnapper_i2c_BusResponse;

/* Struct definitions */
/* *
 I2CBusInit represents a  to
 initialize the I2C bus from the broker. */
typedef struct _wippersnapper_i2c_I2CBusInit {
    int32_t i2c_pin_scl; /* * The desired I2C SCL pin. */
    int32_t i2c_pin_sda; /* * The desired I2C SDA pin. */
    uint32_t i2c_frequency; /* * The desired I2C SCL frequency, in Hz. Default is 100000Hz. */
    int32_t i2c_port_number; /* * The I2C port number. */
} wippersnapper_i2c_I2CBusInit;

/* *
 I2CBusInitResponse represents a response to I2CBusInit */
typedef struct _wippersnapper_i2c_I2CBusInitResponse {
    wippersnapper_i2c_BusResponse bus_response; /* * Whether the I2C bus initialized properly or failed. * */
} wippersnapper_i2c_I2CBusInitResponse;

/* *
 I2CScan represents the parameters required to execute
 a device's I2C scan. */
typedef struct _wippersnapper_i2c_I2CScan {
    int32_t i2c_port_number; /* * The desired I2C port to scan. */
    bool has_bus_init;
    wippersnapper_i2c_I2CBusInit bus_init; /* * The I2C bus initialization . */
} wippersnapper_i2c_I2CScan;

/* *
 I2CScanResponse represents a list of I2C addresses
 found on the bus after I2CScan has executed. */
typedef struct _wippersnapper_i2c_I2CScanResponse {
    pb_size_t found_addresses_count;
    uint32_t found_addresses[120]; /* * The 7-bit addresses of the I2C devices found on the bus, empty if not found. */
    wippersnapper_i2c_BusResponse bus_response; /* * The I2C bus' status. * */
} wippersnapper_i2c_I2CScanResponse;

/* *
 I2CSensorProperties contains
 the properties of an I2C device's sensor such as
 its type and period. */
typedef struct _wippersnapper_i2c_I2CSensorProperties {
    wippersnapper_sensor_SensorType sensor_type; /* * The type of I2C sensor. * */
} wippersnapper_i2c_I2CSensorProperties;

/* *
 I2CInit is a wrapper message for
 an I2C device initialization . */
typedef struct _wippersnapper_i2c_I2CInit {
    int32_t i2c_port_number; /* * The desired I2C port to initialize an I2C device on. */
    bool has_i2c_bus_init_req;
    wippersnapper_i2c_I2CBusInit i2c_bus_init_req; /* * An I2C bus initialization . */
    uint32_t i2c_device_address; /* * The 7-bit I2C address of the device on the bus. */
    char i2c_device_name[15]; /* * The I2C device's name, MUST MATCH the name on the JSON definition file on
https://github.com/adafruit/Wippersnapper_Components. */
    pb_callback_t sensor_types; /* * Properties of each sensor on the I2C device. */
} wippersnapper_i2c_I2CInit;

/* *
 I2CAdded contains the response from a
 device after processing a I2CInit message. */
typedef struct _wippersnapper_i2c_I2CAdded {
    uint32_t i2c_device_address; /* * The 7-bit I2C address of the device on the bus. */
    wippersnapper_i2c_BusResponse bus_response; /* * The I2C bus' status. * */
} wippersnapper_i2c_I2CAdded;

/* *
 I2CUpdateResponse represents if an I2C device's
 sensor(s) is/are successfully updated. */
typedef struct _wippersnapper_i2c_I2CUpdateResponse {
    uint32_t i2c_device_address; /* * The 7-bit I2C address of the device which was updated. */
    wippersnapper_i2c_BusResponse bus_response; /* * The I2C bus' status. * */
} wippersnapper_i2c_I2CUpdateResponse;

/* *
 I2CRemove is a wrapper message containing
 a deinitialization  for a specific i2c device. */
typedef struct _wippersnapper_i2c_I2CRemove {
    int32_t i2c_port_number; /* * The desired I2C port to de-initialize an I2C device on. */
    uint32_t i2c_device_address; /* * The 7-bit I2C address of the device on the bus. */
} wippersnapper_i2c_I2CRemove;

/* *
 I2CRemoved represents if an I2C device's
 sensor(s) is/are successfully de-initialized. */
typedef struct _wippersnapper_i2c_I2CRemoved {
    uint32_t i2c_device_address; /* * The 7-bit I2C address of the device which was initialized. */
    wippersnapper_i2c_BusResponse bus_response; /* * The I2C bus' status. * */
} wippersnapper_i2c_I2CRemoved;

/* *
 Each I2CEvent represents data from **one** I2C sensor.
 NOTE: An I2CEvent can have multiple sensor events if
 the I2C device contains > 1 sensor. */
typedef struct _wippersnapper_i2c_I2CEvent {
    uint32_t sensor_address; /* * The 7-bit I2C address of the I2C device. */
    pb_size_t sensor_events_count;
    wippersnapper_sensor_SensorEvent sensor_events[15]; /* * A, optionally repeated, SensorEvent from a sensor. */
} wippersnapper_i2c_I2CEvent;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _wippersnapper_i2c_BusResponse_MIN wippersnapper_i2c_BusResponse_BUS_RESPONSE_UNSPECIFIED
#define _wippersnapper_i2c_BusResponse_MAX wippersnapper_i2c_BusResponse_BUS_RESPONSE_DEVICE_DEINIT_FAIL
#define _wippersnapper_i2c_BusResponse_ARRAYSIZE ((wippersnapper_i2c_BusResponse)(wippersnapper_i2c_BusResponse_BUS_RESPONSE_DEVICE_DEINIT_FAIL+1))


#define wippersnapper_i2c_I2CBusInitResponse_bus_response_ENUMTYPE wippersnapper_i2c_BusResponse


#define wippersnapper_i2c_I2CScanResponse_bus_response_ENUMTYPE wippersnapper_i2c_BusResponse

#define wippersnapper_i2c_I2CSensorProperties_sensor_type_ENUMTYPE wippersnapper_sensor_SensorType

#define wippersnapper_i2c_I2CInit_sensor_types_ENUMTYPE wippersnapper_sensor_SensorType

#define wippersnapper_i2c_I2CAdded_bus_response_ENUMTYPE wippersnapper_i2c_BusResponse

#define wippersnapper_i2c_I2CUpdateResponse_bus_response_ENUMTYPE wippersnapper_i2c_BusResponse


#define wippersnapper_i2c_I2CRemoved_bus_response_ENUMTYPE wippersnapper_i2c_BusResponse



/* Initializer values for message structs */
#define wippersnapper_i2c_I2CBusInit_init_default {0, 0, 0, 0}
#define wippersnapper_i2c_I2CBusInitResponse_init_default {_wippersnapper_i2c_BusResponse_MIN}
#define wippersnapper_i2c_I2CScan_init_default   {0, false, wippersnapper_i2c_I2CBusInit_init_default}
#define wippersnapper_i2c_I2CScanResponse_init_default {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, _wippersnapper_i2c_BusResponse_MIN}
#define wippersnapper_i2c_I2CSensorProperties_init_default {_wippersnapper_sensor_SensorType_MIN}
#define wippersnapper_i2c_I2CInit_init_default   {0, false, wippersnapper_i2c_I2CBusInit_init_default, 0, "", {{NULL}, NULL}}
#define wippersnapper_i2c_I2CAdded_init_default  {0, _wippersnapper_i2c_BusResponse_MIN}
#define wippersnapper_i2c_I2CUpdateResponse_init_default {0, _wippersnapper_i2c_BusResponse_MIN}
#define wippersnapper_i2c_I2CRemove_init_default {0, 0}
#define wippersnapper_i2c_I2CRemoved_init_default {0, _wippersnapper_i2c_BusResponse_MIN}
#define wippersnapper_i2c_I2CEvent_init_default  {0, 0, {wippersnapper_sensor_SensorEvent_init_default, wippersnapper_sensor_SensorEvent_init_default, wippersnapper_sensor_SensorEvent_init_default, wippersnapper_sensor_SensorEvent_init_default, wippersnapper_sensor_SensorEvent_init_default, wippersnapper_sensor_SensorEvent_init_default, wippersnapper_sensor_SensorEvent_init_default, wippersnapper_sensor_SensorEvent_init_default, wippersnapper_sensor_SensorEvent_init_default, wippersnapper_sensor_SensorEvent_init_default, wippersnapper_sensor_SensorEvent_init_default, wippersnapper_sensor_SensorEvent_init_default, wippersnapper_sensor_SensorEvent_init_default, wippersnapper_sensor_SensorEvent_init_default, wippersnapper_sensor_SensorEvent_init_default}}
#define wippersnapper_i2c_I2CBusInit_init_zero   {0, 0, 0, 0}
#define wippersnapper_i2c_I2CBusInitResponse_init_zero {_wippersnapper_i2c_BusResponse_MIN}
#define wippersnapper_i2c_I2CScan_init_zero      {0, false, wippersnapper_i2c_I2CBusInit_init_zero}
#define wippersnapper_i2c_I2CScanResponse_init_zero {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, _wippersnapper_i2c_BusResponse_MIN}
#define wippersnapper_i2c_I2CSensorProperties_init_zero {_wippersnapper_sensor_SensorType_MIN}
#define wippersnapper_i2c_I2CInit_init_zero      {0, false, wippersnapper_i2c_I2CBusInit_init_zero, 0, "", {{NULL}, NULL}}
#define wippersnapper_i2c_I2CAdded_init_zero     {0, _wippersnapper_i2c_BusResponse_MIN}
#define wippersnapper_i2c_I2CUpdateResponse_init_zero {0, _wippersnapper_i2c_BusResponse_MIN}
#define wippersnapper_i2c_I2CRemove_init_zero    {0, 0}
#define wippersnapper_i2c_I2CRemoved_init_zero   {0, _wippersnapper_i2c_BusResponse_MIN}
#define wippersnapper_i2c_I2CEvent_init_zero     {0, 0, {wippersnapper_sensor_SensorEvent_init_zero, wippersnapper_sensor_SensorEvent_init_zero, wippersnapper_sensor_SensorEvent_init_zero, wippersnapper_sensor_SensorEvent_init_zero, wippersnapper_sensor_SensorEvent_init_zero, wippersnapper_sensor_SensorEvent_init_zero, wippersnapper_sensor_SensorEvent_init_zero, wippersnapper_sensor_SensorEvent_init_zero, wippersnapper_sensor_SensorEvent_init_zero, wippersnapper_sensor_SensorEvent_init_zero, wippersnapper_sensor_SensorEvent_init_zero, wippersnapper_sensor_SensorEvent_init_zero, wippersnapper_sensor_SensorEvent_init_zero, wippersnapper_sensor_SensorEvent_init_zero, wippersnapper_sensor_SensorEvent_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define wippersnapper_i2c_I2CBusInit_i2c_pin_scl_tag 1
#define wippersnapper_i2c_I2CBusInit_i2c_pin_sda_tag 2
#define wippersnapper_i2c_I2CBusInit_i2c_frequency_tag 3
#define wippersnapper_i2c_I2CBusInit_i2c_port_number_tag 4
#define wippersnapper_i2c_I2CBusInitResponse_bus_response_tag 1
#define wippersnapper_i2c_I2CScan_i2c_port_number_tag 1
#define wippersnapper_i2c_I2CScan_bus_init_tag   2
#define wippersnapper_i2c_I2CScanResponse_found_addresses_tag 1
#define wippersnapper_i2c_I2CScanResponse_bus_response_tag 2
#define wippersnapper_i2c_I2CSensorProperties_sensor_type_tag 1
#define wippersnapper_i2c_I2CInit_i2c_port_number_tag 1
#define wippersnapper_i2c_I2CInit_i2c_bus_init_req_tag 2
#define wippersnapper_i2c_I2CInit_i2c_device_address_tag 3
#define wippersnapper_i2c_I2CInit_i2c_device_name_tag 4
#define wippersnapper_i2c_I2CInit_sensor_types_tag 5
#define wippersnapper_i2c_I2CAdded_i2c_device_address_tag 1
#define wippersnapper_i2c_I2CAdded_bus_response_tag 2
#define wippersnapper_i2c_I2CUpdateResponse_i2c_device_address_tag 1
#define wippersnapper_i2c_I2CUpdateResponse_bus_response_tag 2
#define wippersnapper_i2c_I2CRemove_i2c_port_number_tag 1
#define wippersnapper_i2c_I2CRemove_i2c_device_address_tag 2
#define wippersnapper_i2c_I2CRemoved_i2c_device_address_tag 1
#define wippersnapper_i2c_I2CRemoved_bus_response_tag 2
#define wippersnapper_i2c_I2CEvent_sensor_address_tag 1
#define wippersnapper_i2c_I2CEvent_sensor_events_tag 2

/* Struct field encoding specification for nanopb */
#define wippersnapper_i2c_I2CBusInit_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    i2c_pin_scl,       1) \
X(a, STATIC,   SINGULAR, INT32,    i2c_pin_sda,       2) \
X(a, STATIC,   SINGULAR, UINT32,   i2c_frequency,     3) \
X(a, STATIC,   SINGULAR, INT32,    i2c_port_number,   4)
#define wippersnapper_i2c_I2CBusInit_CALLBACK NULL
#define wippersnapper_i2c_I2CBusInit_DEFAULT NULL

#define wippersnapper_i2c_I2CBusInitResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    bus_response,      1)
#define wippersnapper_i2c_I2CBusInitResponse_CALLBACK NULL
#define wippersnapper_i2c_I2CBusInitResponse_DEFAULT NULL

#define wippersnapper_i2c_I2CScan_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    i2c_port_number,   1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  bus_init,          2)
#define wippersnapper_i2c_I2CScan_CALLBACK NULL
#define wippersnapper_i2c_I2CScan_DEFAULT NULL
#define wippersnapper_i2c_I2CScan_bus_init_MSGTYPE wippersnapper_i2c_I2CBusInit

#define wippersnapper_i2c_I2CScanResponse_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, UINT32,   found_addresses,   1) \
X(a, STATIC,   SINGULAR, UENUM,    bus_response,      2)
#define wippersnapper_i2c_I2CScanResponse_CALLBACK NULL
#define wippersnapper_i2c_I2CScanResponse_DEFAULT NULL

#define wippersnapper_i2c_I2CSensorProperties_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    sensor_type,       1)
#define wippersnapper_i2c_I2CSensorProperties_CALLBACK NULL
#define wippersnapper_i2c_I2CSensorProperties_DEFAULT NULL

#define wippersnapper_i2c_I2CInit_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    i2c_port_number,   1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  i2c_bus_init_req,   2) \
X(a, STATIC,   SINGULAR, UINT32,   i2c_device_address,   3) \
X(a, STATIC,   SINGULAR, STRING,   i2c_device_name,   4) \
X(a, CALLBACK, REPEATED, UENUM,    sensor_types,      5)
#define wippersnapper_i2c_I2CInit_CALLBACK pb_default_field_callback
#define wippersnapper_i2c_I2CInit_DEFAULT NULL
#define wippersnapper_i2c_I2CInit_i2c_bus_init_req_MSGTYPE wippersnapper_i2c_I2CBusInit

#define wippersnapper_i2c_I2CAdded_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   i2c_device_address,   1) \
X(a, STATIC,   SINGULAR, UENUM,    bus_response,      2)
#define wippersnapper_i2c_I2CAdded_CALLBACK NULL
#define wippersnapper_i2c_I2CAdded_DEFAULT NULL

#define wippersnapper_i2c_I2CUpdateResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   i2c_device_address,   1) \
X(a, STATIC,   SINGULAR, UENUM,    bus_response,      2)
#define wippersnapper_i2c_I2CUpdateResponse_CALLBACK NULL
#define wippersnapper_i2c_I2CUpdateResponse_DEFAULT NULL

#define wippersnapper_i2c_I2CRemove_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    i2c_port_number,   1) \
X(a, STATIC,   SINGULAR, UINT32,   i2c_device_address,   2)
#define wippersnapper_i2c_I2CRemove_CALLBACK NULL
#define wippersnapper_i2c_I2CRemove_DEFAULT NULL

#define wippersnapper_i2c_I2CRemoved_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   i2c_device_address,   1) \
X(a, STATIC,   SINGULAR, UENUM,    bus_response,      2)
#define wippersnapper_i2c_I2CRemoved_CALLBACK NULL
#define wippersnapper_i2c_I2CRemoved_DEFAULT NULL

#define wippersnapper_i2c_I2CEvent_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   sensor_address,    1) \
X(a, STATIC,   REPEATED, MESSAGE,  sensor_events,     2)
#define wippersnapper_i2c_I2CEvent_CALLBACK NULL
#define wippersnapper_i2c_I2CEvent_DEFAULT NULL
#define wippersnapper_i2c_I2CEvent_sensor_events_MSGTYPE wippersnapper_sensor_SensorEvent

extern const pb_msgdesc_t wippersnapper_i2c_I2CBusInit_msg;
extern const pb_msgdesc_t wippersnapper_i2c_I2CBusInitResponse_msg;
extern const pb_msgdesc_t wippersnapper_i2c_I2CScan_msg;
extern const pb_msgdesc_t wippersnapper_i2c_I2CScanResponse_msg;
extern const pb_msgdesc_t wippersnapper_i2c_I2CSensorProperties_msg;
extern const pb_msgdesc_t wippersnapper_i2c_I2CInit_msg;
extern const pb_msgdesc_t wippersnapper_i2c_I2CAdded_msg;
extern const pb_msgdesc_t wippersnapper_i2c_I2CUpdateResponse_msg;
extern const pb_msgdesc_t wippersnapper_i2c_I2CRemove_msg;
extern const pb_msgdesc_t wippersnapper_i2c_I2CRemoved_msg;
extern const pb_msgdesc_t wippersnapper_i2c_I2CEvent_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define wippersnapper_i2c_I2CBusInit_fields &wippersnapper_i2c_I2CBusInit_msg
#define wippersnapper_i2c_I2CBusInitResponse_fields &wippersnapper_i2c_I2CBusInitResponse_msg
#define wippersnapper_i2c_I2CScan_fields &wippersnapper_i2c_I2CScan_msg
#define wippersnapper_i2c_I2CScanResponse_fields &wippersnapper_i2c_I2CScanResponse_msg
#define wippersnapper_i2c_I2CSensorProperties_fields &wippersnapper_i2c_I2CSensorProperties_msg
#define wippersnapper_i2c_I2CInit_fields &wippersnapper_i2c_I2CInit_msg
#define wippersnapper_i2c_I2CAdded_fields &wippersnapper_i2c_I2CAdded_msg
#define wippersnapper_i2c_I2CUpdateResponse_fields &wippersnapper_i2c_I2CUpdateResponse_msg
#define wippersnapper_i2c_I2CRemove_fields &wippersnapper_i2c_I2CRemove_msg
#define wippersnapper_i2c_I2CRemoved_fields &wippersnapper_i2c_I2CRemoved_msg
#define wippersnapper_i2c_I2CEvent_fields &wippersnapper_i2c_I2CEvent_msg

/* Maximum encoded size of messages (where known) */
/* wippersnapper_i2c_I2CInit_size depends on runtime parameters */
#define WIPPERSNAPPER_I2C_WIPPERSNAPPER_I2C_PB_H_MAX_SIZE wippersnapper_i2c_I2CScanResponse_size
#define wippersnapper_i2c_I2CAdded_size          8
#define wippersnapper_i2c_I2CBusInitResponse_size 2
#define wippersnapper_i2c_I2CBusInit_size        39
#define wippersnapper_i2c_I2CRemove_size         17
#define wippersnapper_i2c_I2CRemoved_size        8
#define wippersnapper_i2c_I2CScanResponse_size   722
#define wippersnapper_i2c_I2CScan_size           52
#define wippersnapper_i2c_I2CSensorProperties_size 2
#define wippersnapper_i2c_I2CUpdateResponse_size 8
#if defined(wippersnapper_sensor_SensorEvent_size)
#define wippersnapper_i2c_I2CEvent_size          (96 + 15*wippersnapper_sensor_SensorEvent_size)
#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
